# Generated by Django 3.2.21 on 2023-10-11 18:14

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import nautobot.ipam.fields
import nautobot_firewall_models.utils
import nautobot_firewall_models.validators
import uuid

from nautobot_firewall_models.migrations.helpers.custom_migration_helpers import (
    create_status,
    create_default_objects,
    reverse_create_default_objects,
    reverse_create_status,
)


class Migration(migrations.Migration):
    replaces = [
        ("nautobot_firewall_models", "0001_initial"),
        ("nautobot_firewall_models", "0002_custom_status"),
        ("nautobot_firewall_models", "0003_default_status"),
        ("nautobot_firewall_models", "0004_add_description"),
        ("nautobot_firewall_models", "0005_capircapolicy"),
        ("nautobot_firewall_models", "0006_renaming_part1"),
        ("nautobot_firewall_models", "0007_renaming_part2"),
        ("nautobot_firewall_models", "0008_renaming_part3"),
        ("nautobot_firewall_models", "0009_proper_ordering_on_through"),
        ("nautobot_firewall_models", "0010_nat_policy"),
        ("nautobot_firewall_models", "0011_custom_status_nat"),
        ("nautobot_firewall_models", "0012_remove_status_m2m_through_models"),
        ("nautobot_firewall_models", "0013_applications"),
        ("nautobot_firewall_models", "0014_custom_status_application"),
        ("nautobot_firewall_models", "0015_alter_capircapolicy_device"),
        ("nautobot_firewall_models", "0016_nautobot_v2_migrations"),
        ("nautobot_firewall_models", "0017_resolve_issues_through_tables_part1"),
        ("nautobot_firewall_models", "0018_resolve_issues_through_tables_part2"),
        ("nautobot_firewall_models", "0019_resolve_issues_through_tables_part3"),
        ("nautobot_firewall_models", "0020_field_cleanups"),
    ]

    dependencies = [
        ("dcim", "0049_remove_slugs_and_change_device_primary_ip_fields"),
        ("tenancy", "0008_tagsfield"),
        ("extras", "0098_rename_data_jobresult_result"),
        ("ipam", "0038_vlan_group_name_unique_remove_slug"),
    ]

    operations = [
        migrations.CreateModel(
            name="AddressObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "Address Objects",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="AddressObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "address_objects",
                    models.ManyToManyField(
                        blank=True, related_name="address_object_groups", to="nautobot_firewall_models.AddressObject"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_addressobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Address Object Groups",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ApplicationObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("category", models.CharField(blank=True, max_length=48)),
                ("subcategory", models.CharField(blank=True, max_length=48)),
                ("technology", models.CharField(blank=True, max_length=48)),
                ("risk", models.PositiveIntegerField(blank=True, null=True)),
                ("default_type", models.CharField(blank=True, max_length=48)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("default_ip_protocol", models.CharField(blank=True, max_length=48)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_applicationobject_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Application Objects",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ApplicationObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "application_objects",
                    models.ManyToManyField(
                        blank=True,
                        related_name="application_object_groups",
                        to="nautobot_firewall_models.ApplicationObject",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_applicationobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Application Object Groups",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="NATPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "NAT Policy",
                "verbose_name_plural": "NAT Policies",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "Policies",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ServiceObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100)),
                (
                    "port",
                    models.CharField(
                        blank=True, max_length=20, validators=[nautobot_firewall_models.validators.validate_port]
                    ),
                ),
                ("ip_protocol", models.CharField(max_length=20)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_serviceobject_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Service Objects",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="UserObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("username", models.CharField(max_length=100, unique=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_userobject_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "User Objects",
                "ordering": ["username"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="Zone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("interfaces", models.ManyToManyField(blank=True, related_name="zones", to="dcim.Interface")),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_zone_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                ("vrfs", models.ManyToManyField(blank=True, related_name="zones", to="ipam.VRF")),
            ],
            options={
                "verbose_name_plural": "Zones",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="UserObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_userobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "user_objects",
                    models.ManyToManyField(
                        blank=True, related_name="user_object_groups", to="nautobot_firewall_models.UserObject"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Object Groups",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ServiceObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "service_objects",
                    models.ManyToManyField(
                        blank=True, related_name="service_object_groups", to="nautobot_firewall_models.ServiceObject"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_serviceobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Service Object Groups",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="PolicyRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100)),
                ("action", models.CharField(max_length=20)),
                ("log", models.BooleanField(default=False)),
                ("request_id", models.CharField(blank=True, max_length=100)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("index", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "application_groups",
                    models.ManyToManyField(
                        blank=True, related_name="policy_rules", to="nautobot_firewall_models.ApplicationObjectGroup"
                    ),
                ),
                (
                    "applications",
                    models.ManyToManyField(
                        blank=True, related_name="policy_rules", to="nautobot_firewall_models.ApplicationObject"
                    ),
                ),
                (
                    "destination_address_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="destination_policy_rules",
                        to="nautobot_firewall_models.AddressObjectGroup",
                    ),
                ),
                (
                    "destination_addresses",
                    models.ManyToManyField(
                        blank=True, related_name="destination_policy_rules", to="nautobot_firewall_models.AddressObject"
                    ),
                ),
                (
                    "destination_service_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="destination_policy_rules",
                        to="nautobot_firewall_models.ServiceObjectGroup",
                    ),
                ),
                (
                    "destination_services",
                    models.ManyToManyField(
                        blank=True, related_name="destination_policy_rules", to="nautobot_firewall_models.ServiceObject"
                    ),
                ),
                (
                    "destination_zone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="destination_policy_rules",
                        to="nautobot_firewall_models.zone",
                    ),
                ),
                (
                    "source_address_groups",
                    models.ManyToManyField(
                        blank=True, related_name="source_policy_rules", to="nautobot_firewall_models.AddressObjectGroup"
                    ),
                ),
                (
                    "source_addresses",
                    models.ManyToManyField(
                        blank=True, related_name="source_policy_rules", to="nautobot_firewall_models.AddressObject"
                    ),
                ),
                (
                    "source_service_groups",
                    models.ManyToManyField(
                        blank=True, related_name="source_policy_rules", to="nautobot_firewall_models.ServiceObjectGroup"
                    ),
                ),
                (
                    "source_services",
                    models.ManyToManyField(
                        blank=True, related_name="source_policy_rules", to="nautobot_firewall_models.ServiceObject"
                    ),
                ),
                (
                    "source_user_groups",
                    models.ManyToManyField(
                        blank=True, related_name="policy_rules", to="nautobot_firewall_models.UserObjectGroup"
                    ),
                ),
                (
                    "source_users",
                    models.ManyToManyField(
                        blank=True, related_name="policy_rules", to="nautobot_firewall_models.UserObject"
                    ),
                ),
                (
                    "source_zone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="source_policy_rules",
                        to="nautobot_firewall_models.zone",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_policyrule_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Policy Rules",
                "ordering": ["index", "name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="PolicyDynamicGroupM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                (
                    "dynamic_group",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="extras.dynamicgroup"),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_firewall_models.policy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
                "unique_together": {("policy", "dynamic_group")},
            },
        ),
        migrations.CreateModel(
            name="PolicyDeviceM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("device", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="dcim.device")),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_firewall_models.policy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
                "unique_together": {("policy", "device")},
            },
        ),
        migrations.AddField(
            model_name="policy",
            name="assigned_devices",
            field=models.ManyToManyField(
                related_name="firewall_policies", through="nautobot_firewall_models.PolicyDeviceM2M", to="dcim.Device"
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="assigned_dynamic_groups",
            field=models.ManyToManyField(
                related_name="firewall_policies",
                through="nautobot_firewall_models.PolicyDynamicGroupM2M",
                to="extras.DynamicGroup",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="policy_rules",
            field=models.ManyToManyField(blank=True, related_name="policies", to="nautobot_firewall_models.PolicyRule"),
        ),
        migrations.AddField(
            model_name="policy",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                default=nautobot_firewall_models.utils.get_default_status,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_policy_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="tags",
            field=nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="policy",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="policies",
                to="tenancy.tenant",
            ),
        ),
        migrations.CreateModel(
            name="NATPolicyRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100)),
                ("remark", models.BooleanField(default=False)),
                ("log", models.BooleanField(default=False)),
                ("request_id", models.CharField(blank=True, max_length=100)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("index", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "destination_zone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="destination_nat_policy_rules",
                        to="nautobot_firewall_models.zone",
                    ),
                ),
                (
                    "original_destination_address_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_destination_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObjectGroup",
                    ),
                ),
                (
                    "original_destination_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_destination_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObject",
                    ),
                ),
                (
                    "original_destination_service_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_destination_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObjectGroup",
                    ),
                ),
                (
                    "original_destination_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_destination_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObject",
                    ),
                ),
                (
                    "original_source_address_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_source_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObjectGroup",
                    ),
                ),
                (
                    "original_source_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_source_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObject",
                    ),
                ),
                (
                    "original_source_service_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_source_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObjectGroup",
                    ),
                ),
                (
                    "original_source_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="original_source_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObject",
                    ),
                ),
                (
                    "source_zone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="source_nat_policy_rules",
                        to="nautobot_firewall_models.zone",
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_natpolicyrule_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "translated_destination_address_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_destination_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObjectGroup",
                    ),
                ),
                (
                    "translated_destination_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_destination_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObject",
                    ),
                ),
                (
                    "translated_destination_service_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_destination_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObjectGroup",
                    ),
                ),
                (
                    "translated_destination_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_destination_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObject",
                    ),
                ),
                (
                    "translated_source_address_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_source_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObjectGroup",
                    ),
                ),
                (
                    "translated_source_addresses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_source_nat_policy_rules",
                        to="nautobot_firewall_models.AddressObject",
                    ),
                ),
                (
                    "translated_source_service_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_source_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObjectGroup",
                    ),
                ),
                (
                    "translated_source_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="translated_source_nat_policy_rules",
                        to="nautobot_firewall_models.ServiceObject",
                    ),
                ),
            ],
            options={
                "verbose_name": "NAT Policy Rule",
                "verbose_name_plural": "NAT Policy Rules",
                "ordering": ["index"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="NATPolicyDynamicGroupM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                (
                    "dynamic_group",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="extras.dynamicgroup"),
                ),
                (
                    "nat_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_firewall_models.natpolicy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
                "unique_together": {("nat_policy", "dynamic_group")},
            },
        ),
        migrations.CreateModel(
            name="NATPolicyDeviceM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("device", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="dcim.device")),
                (
                    "nat_policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_firewall_models.natpolicy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
                "unique_together": {("nat_policy", "device")},
            },
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="assigned_devices",
            field=models.ManyToManyField(
                related_name="nat_policies", through="nautobot_firewall_models.NATPolicyDeviceM2M", to="dcim.Device"
            ),
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="assigned_dynamic_groups",
            field=models.ManyToManyField(
                related_name="nat_policies",
                through="nautobot_firewall_models.NATPolicyDynamicGroupM2M",
                to="extras.DynamicGroup",
            ),
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="nat_policy_rules",
            field=models.ManyToManyField(
                blank=True, related_name="nat_policies", to="nautobot_firewall_models.NATPolicyRule"
            ),
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                default=nautobot_firewall_models.utils.get_default_status,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_natpolicy_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="tags",
            field=nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="natpolicy",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nat_policies",
                to="tenancy.tenant",
            ),
        ),
        migrations.CreateModel(
            name="IPRange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("start_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("end_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("size", models.PositiveIntegerField(editable=False)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_iprange_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ip_ranges",
                        to="ipam.vrf",
                    ),
                ),
            ],
            options={
                "verbose_name": "IP Range",
                "verbose_name_plural": "IP Ranges",
                "ordering": ["start_address"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="FQDN",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=254, unique=True)),
                ("ip_addresses", models.ManyToManyField(blank=True, related_name="fqdns", to="ipam.IPAddress")),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        default=nautobot_firewall_models.utils.get_default_status,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_fqdn_related",
                        to="extras.status",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "FQDN",
                "verbose_name_plural": "FQDNs",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="CapircaPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("pol", models.TextField(blank=True)),
                ("net", models.TextField(blank=True)),
                ("svc", models.TextField(blank=True)),
                ("cfg", models.TextField(blank=True)),
                (
                    "device",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capirca_policy",
                        to="dcim.device",
                    ),
                ),
                ("tags", nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Capirca Policies",
                "ordering": ["device"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="fqdn",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="address_objects",
                to="nautobot_firewall_models.fqdn",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="address_objects",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_range",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="address_objects",
                to="nautobot_firewall_models.iprange",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="prefix",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="address_objects",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                default=nautobot_firewall_models.utils.get_default_status,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_addressobject_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="tags",
            field=nautobot.core.models.fields.TagsField(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(fields=("start_address", "end_address", "vrf"), name="unique_with_vrf"),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(
                condition=models.Q(("vrf", None)), fields=("start_address", "end_address"), name="unique_without_vrf"
            ),
        ),
        migrations.RunPython(code=create_status, reverse_code=reverse_create_status),
        migrations.RunPython(code=create_default_objects, reverse_code=reverse_create_default_objects),
    ]
